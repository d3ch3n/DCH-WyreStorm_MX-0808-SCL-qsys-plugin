
-- Basic Framework Plugin
-- by QSC
-- October 2020

-- Information block for the plugin
PluginInfo = {
  Name = "DCH~WyreStorm MX-0808-SCL",
  Version = "2.0",
  BuildVersion = "2.0.1.0",
  Id = "1dce4a60-da90-4e31-ac50-97b876900199",
  Author = "Dechen Technology",
  Description = "Control WyreStorm MX-0808-SCL HDMI Matrix Switcher",  
}


-- Global Variables and Functions

-- Define the color of the plugin object in the design
local Colors = {
    White = {255, 255, 255},
    Grey = {232, 232, 232},
    DarkGrey = {50, 50, 50},
    Black = {0, 0, 0},
    Red = {255, 0, 0},
    Green = {0, 255, 0},
    LightBlue = {65, 211, 248},
    Stroke = {156, 171, 175  },
    FaderBlue = {50,90,117}
}

OutputRouting = {0,0,0,0,0,0,0,0} -- Output to Input mapping table
Sw_Mode_AFV = false
Sw_Mode_BreakAudio = false

Sw_Video = false
Sw_Audio = false


--getIPos: returns position in grid layout
-- qty: quantity of items already placed
-- rowlen: number of items per row
-- base: base position {x=,y=}  starting point
-- ofs: offset {x=,y=} distance between items  in x and y direction
local function GetIPos(qty, rowlen, base, ofs)
    local row,col = (qty-1)//(rowlen),(qty-1)%rowlen
    return { base.x + col*ofs.x, base.y + row*ofs.y }
end

function FeedbackColor (input,output)
    for i = 1, 8 do
        if i == input then
        Controls["Route_"..i.."_"..output].Color = "Green"
        else
        Controls["Route_"..i.."_"..output].Color = "Black"
        end
    end
end




-- Define the color of the plugin object in the design
function GetColor(props)
  return { 255, 255, 255 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "DCH - Wyrestorm MX-0808-H2A-MK2, version " .. PluginInfo.BuildVersion
end

-- Optional function used if plugin has multiple pages
PageNames = { "Setup", "Switch", "Presets", "CEC" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "Base Model" } )
  end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  --[[table.insert(pins,{
    Name = "Audio Output",
    Direction = "output",
  })]]
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  --[[table.insert(components,{
    Name = "WyreStorm MX-0808-SCL",
    Type = "HDMI Matrix Switcher",
    Properties =   
    {
    }
  })]]
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  --table.insert( wiring, { "Audio Output", "main_mixer Output 1" } )
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  
  
  -- Configuração de Rede
  table.insert(ctrls, {
    Name = "DeviceIP",
    ControlType = "Text",
    Count = 1,
    UserPin = false,
    PinStyle = "none"
  })
  
  table.insert(ctrls, {
    Name = "DevicePort",
    ControlType = "Text",
    Count = 1,
    UserPin = false,
    PinStyle = "none"
  })
  table.insert(ctrls, {
      Name = "Status",
      ControlType = "Indicator",
      IndicatorType = "Status",
      PinStyle = "Output",
      UserPin = true,
      Count = 1
    })
  
  -- Cabeçalhos das Entradas
  for inp = 1, 8 do
    table.insert(ctrls, {
      Name = "HeaderIN"..inp,
      ControlType = "Label",
      Count = 1,
      UserPin = false,
      PinStyle = "none"
    })
  end
  
  -- Grade de botões de chaveamento (8x8)
  for outp = 1, 8 do
    -- Label da saída
    table.insert(ctrls, {
      Name = "LabelOUT"..outp,
      ControlType = "Label",
      Count = 1,
      UserPin = false,
      PinStyle = "none"
    })
  
    -- Botões de seleção de entrada para cada saída
    for inp = 1, 8 do
      table.insert(ctrls, {
        Name = "Route_"..inp.."_"..outp,
        ControlType = "Button",
        ButtonType = "Trigger",
        Count = 1,
        UserPin = false,
        PinStyle = "none"
      })
    end
  end
  -- Feedback de status
    table.insert(ctrls, {
      Name = "Feedback",
      ControlType = "Text",
      Count = 8,
      UserPin = false,
      PinStyle = "none"
    })
  
    --[[
    -- Audio Follow Video (radio)
  table.insert(ctrls, {
    Name = "AudioFollowVideo",
    ControlType = "Button",
    ButtonType = "Toggle",
    Count = 1,
    UserPin = true,
    PinStyle = "Input"
  })
  
  -- Break Audio (radio)
  table.insert(ctrls, {
    Name = "BreakAudio",
    ControlType = "Button",
    ButtonType = "Toggle",
    Count = 1,
    UserPin = true,
    PinStyle = "Input"
  })
  
    -- Audio Follow Video (radio)
  table.insert(ctrls, {
    Name = "SwVideo",
    ControlType = "Button",
    ButtonType = "Toggle",
    Count = 1,
    UserPin = true,
    PinStyle = "Input"
  })
  
  -- Break Audio (radio)
  table.insert(ctrls, {
    Name = "SwAudio",
    ControlType = "Button",
    ButtonType = "Toggle",
    Count = 1,
    UserPin = true,
    PinStyle = "Input"
  })
  
  ]]
  
  -----Presets
  for i = 1, 6 do
    table.insert(ctrls, {
      Name = "SavePreset"..i,
      ControlType = "Button",
      ButtonType = "Momentary",
      UserPin = true,
      PinStyle = "Both"
    })
    table.insert(ctrls, {
      Name = "RestorePreset"..i,
      ControlType = "Button",
      ButtonType = "Momentary",
      UserPin = true,
      PinStyle = "Both"
    })
  end
  
  -------cec
  
  for outp = 1, 8 do
  
      -- Botão Power Toggle
      table.insert(ctrls, {
          Name = "CEC_PWR_OUT"..outp,
          ControlType = "Button",
          ButtonType = "Toggle",
          Boolean = false  -- Inicialmente desligado
      })
  
      -- Botão Power ON
      table.insert(ctrls, {
          Name = "CEC_PWR_ON_OUT"..outp,
          ControlType = "Button",
          ButtonType = "Toggle",
          UserPin = true,
          PinStyle = "Both"
      })
  
      -- Botão Power OFF
      table.insert(ctrls, {
          Name = "CEC_PWR_OFF_OUT"..outp,
          ControlType = "Button",
          ButtonType = "Toggle",
          UserPin = true,
          PinStyle = "Both"
      })
  
      -- Botão AutoCEC Power
      table.insert(ctrls, {
          Name = "AUTOCEC_OUT"..outp,
          ControlType = "Button",
          ButtonType = "Toggle",
          Boolean = false,  -- Inicialmente desligado
          UserPin = true,
          PinStyle = "Both"
      })
    end
  
  --[[
    -- HDCP Inputs
  for inp = 1, 8 do
      -- Botão ON
      table.insert(ctrls, {
          Name = "HDCP_IN"..inp.."_ON",
          ControlType = "Button",
          ButtonType = "Momentary",
          Boolean = false,
          UserPin = true,
          PinStyle = "Both"
      })
  
      -- Botão OFF
      table.insert(ctrls, {
          Name = "HDCP_IN"..inp.."_OFF",
          ControlType = "Button",
          ButtonType = "Momentary",
          Boolean = false,
          UserPin = true,
          PinStyle = "Both"
      })
  
      -- Feedback Boolean
      table.insert(ctrls, {
          Name = "HDCP_IN"..inp.."_FB",
          ControlType = "Indicator",
          Boolean = false,
          UserPin = false
      })
  end
  
  -- HDCP Outputs
  for outp = 1, 8 do
      -- Botão ON
      table.insert(ctrls, {
          Name = "HDCP_OUT"..outp.."_ON",
          ControlType = "Button",
          ButtonType = "Momentary",
          Boolean = false,
          UserPin = true,
          PinStyle = "Both"
      })
  
      -- Botão OFF
      table.insert(ctrls, {
          Name = "HDCP_OUT"..outp.."_OFF",
          ControlType = "Button",
          ButtonType = "Momentary",
          Boolean = false,
          UserPin = true,
          PinStyle = "Both"
      })
  
      -- Feedback Boolean
      table.insert(ctrls, {
          Name = "HDCP_OUT"..outp.."_FB",
          ControlType = "Indicator",
          Boolean = false,
          UserPin = false
      })
          
  end]]
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  
  Logo = ''
  table.insert(graphics,{
    Type="Image",
    Image=Logo,
    Position={4,4},
    Size={150,43}
  })
  
  
  
  if CurrentPage == "Setup" then
  
    -- Configuração de Rede
    layout["DeviceIP"] = {
      PrettyName = "Device IP",
      Type = "Text",
      Position = {16, 50},
      Size = {120, 24},
      FontSize = 8,
      Color = Colors.White,
      StrokeColor = Colors.White
    }
  
    layout["DevicePort"] = {
      PrettyName = "Device Port",
      Type = "Text",
      Position = {150, 50},
      Size = {60, 24},
      FontSize = 8,
      Color = Colors.White,
      StrokeColor = Colors.White
    }
  
    layout["Status"] = {
      PrettyName = "Connection Status", 
      Position = {428, 38}, 
      Size = {301, 48}
    }
  
  
  elseif CurrentPage == "Switch" then
  
    -- Cabeçalho das Entradas
      for inp = 1, 8 do
        table.insert(graphics,{
          Name = "HeaderIN"..inp,
          Type = "Text",
          Position = {100 + (inp-1)*60, 80},
          Size = {50, 20},
          FontSize = 12,
          Color = Colors.Black,
          StrokeColor = Colors.Gray,
          TextColor = Colors.Black,
          Text = "IN "..inp
        })
      end
  
      -- Labels das Saídas
      for outp = 1, 8 do
        table.insert(graphics,{
          Name = "LabelOUT"..outp,
          Type = "Text",
          Position = {40, 100 + (outp-1)*36},
          Size = {50, 24},
          FontSize = 12,
          Color = Colors.Black,
          StrokeColor = Colors.Gray,
          TextColor = Colors.Black,
          Text = "OUT "..outp
        })
      end
  
  
      --[[
      layout["AudioFollowVideo"] = {
        PrettyName = "AudioFollowVideo",
        Type = "Button",
        Position = {300,10},
        Size = {100,24},
        --Color = Colors.Black,
        CornerRadius = 12,
        Legend = "Audio Follow Video",
        FontSize = 9,
      }
      layout["BreakAudio"] = {
        PrettyName = "BreakAudio",
        Type = "Button",
        Position = {450,10},
        Size = {100,24},
        --Color = Colors.Black,
        CornerRadius = 12,
        Legend = "Break Audio",
        FontSize = 9,
      }
  
      layout["SwVideo"] = {
        PrettyName = "SwVideo",
        Type = "Button",
        Position = {400,40},
        Size = {100,24},
        --Color = Colors.Black,
        CornerRadius = 12,
        Legend = "Video",
        FontSize = 9,
      }
      layout["SwAudio"] = {
        PrettyName = "SwAudio",
        Type = "Button",
        Position = {500,40},
        Size = {100,24},
        --Color = Colors.Black,
        CornerRadius = 12,
        Legend = "Audio",
        FontSize = 9,
      }
        ]]
  
  -- Grade de botões (8 Saídas x 8 Entradas)
      for outp = 1, 8 do
        -- Label da saída na lateral esquerda
        layout["LabelOUT"..outp] = {
          PrettyName = "Label OUT"..outp,
          Type = "Text",
          Position = {40, 100 + (outp-1)*36},
          Size = {50, 24},
          FontSize = 12,
          Color = Colors.Black,
          StrokeColor = Colors.Gray,
          Legend = "OUT "..outp
        }
  
    -- Botões de chaveamento (linha da saída)
      for inp = 1, 8 do
        layout["Route_"..inp.."_"..outp] = {
          PrettyName = "Route IN"..inp.." -> OUT"..outp,
          Style = "Button",
          ButtonStyle = "StateTrigger",
          Legend = tostring(inp),
          Position = {100 + (inp-1)*60, 100 + (outp-1)*36},
          Size = {50, 24},
          FontSize = 12,
          HTextAlign = "Center",
          Padding = 2,
          StrokeWidth = 1,
          Color = Colors.Black,
          StrokeColor = Colors.Black,
          CornerRadius = 6
        }
      end
    end
  
    -- Feedback textual (qual entrada está em cada saída)
    for outp = 1, 8 do
      layout["Feedback " ..outp] = {
        PrettyName = "Feedback OUT "..outp,
        Type = "Text",
        Position = {600, 100 + (outp-1)*36},
        Size = {70, 24},
        FontSize = 16,
        Color = Colors.Black,
        StrokeColor = Colors.Black,
        TextColor = Colors.White
      }
    end
    -- TBD
  elseif CurrentPage == "Presets" then
    
    for i = 1, 3 do
    layout["SavePreset"..i] = {
      PrettyName = "Save Preset "..i,
      Type = "Button",
      Position = { 50, 50 + (i-1)*40 },
      Size = { 100, 30 },
      Legend = "Save Preset "..i,
      FontSize = 9,
      CornerRadius = 8,
      Color = Colors.Blue
    }
    layout["RestorePreset"..i] = {
      PrettyName = "Restore Preset "..i,
      Type = "Button",
      Position = { 170, 50 + (i-1)*40 },
      Size = { 100, 30 },
      Legend = "Restore Preset "..i,
      FontSize = 9,
      CornerRadius = 8,
      Color = Colors.Green
    }
    end
  elseif CurrentPage == "CEC" then
    -- ==== LAYOUT CEC CONTROLS ====
      for outp = 1, 8 do
        -- Label da saída
        table.insert(graphics,{
          PrettyName = "CEC Label OUT"..outp,
          Type = "Text",
          Position = {40, 50 + (outp-1)*40},
          Size = {50, 24},
          FontSize = 12,
          Text = "OUT "..outp
        })
  
              -- Botão Power Toggle
        layout["CEC_PWR_OUT"..outp] = {
          PrettyName = "CEC Power Toggle OUT"..outp,
          Type = "Button",
          ButtonType = "Toggle",
          Position = {120, 50 + (outp-1)*40},
          Size = {100, 30},
          Legend = "Power Toggle",
          FontSize = 9,
          CornerRadius = 8,
          Color = Colors.Orange
        }
  
        -- Botão Power ON
        layout["CEC_PWR_ON_OUT"..outp] = {
          PrettyName = "CEC Power ON OUT"..outp,
          Type = "Button",
          ButtonType = "Trigger",
          Position = {230, 50 + (outp-1)*40},
          Size = {80, 30},
          Legend = "Power ON",
          FontSize = 9,
          CornerRadius = 8,
          Color = Colors.Green
        }
  
        -- Botão Power OFF
        layout["CEC_PWR_OFF_OUT"..outp] = {
          PrettyName = "CEC Power OFF OUT"..outp,
          Type = "Button",
          ButtonType = "Trigger",
          Position = {320, 50 + (outp-1)*40},
          Size = {80, 30},
          Legend = "Power OFF",
          FontSize = 9,
          CornerRadius = 8,
          Color = Colors.Red
        }
  
        -- Botão AutoCEC Power
        layout["AUTOCEC_OUT"..outp] = {
          PrettyName = "AutoCEC OUT"..outp,
          Type = "Button",
          ButtonType = "Toggle",
          Position = {410, 50 + (outp-1)*40},
          Size = {120, 30},
          Legend = "Auto CEC Power",
          FontSize = 9,
          CornerRadius = 8,
          Color = Colors.Purple
        }
      end
    --[[
    elseif CurrentPage == "HDCP" then
      -- *** HDCP Layout ***
  
      -- HDCP Inputs
      for inp = 1, 8 do
          -- Label
          table.insert(graphics, {
              PrettyName = "HDCP Label IN"..inp,
              Type = "Text",
              Position = {40, 50 + (inp-1)*40},
              Size = {50, 24},
              FontSize = 12,
              Text = "IN "..inp
          })
  
          -- Botão ON
          layout["HDCP_IN"..inp.."_ON"] = {
              PrettyName = "HDCP Input "..inp.." ON",
              Type = "Button",
              ButtonType = "Momentary",
              Position = {120, 50 + (inp-1)*40},
              Size = {60, 30},
              Legend = "ON",
              FontSize = 9,
              CornerRadius = 8,
              Color = Colors.Green
          }
  
          -- Botão OFF
          layout["HDCP_IN"..inp.."_OFF"] = {
              PrettyName = "HDCP Input "..inp.." OFF",
              Type = "Button",
              ButtonType = "Momentary",
              Position = {190, 50 + (inp-1)*40},
              Size = {60, 30},
              Legend = "OFF",
              FontSize = 9,
              CornerRadius = 8,
              Color = Colors.Red
          }
  
          -- Feedback
          layout["HDCP_IN"..inp.."_FB"] = {
              PrettyName = "HDCP Input "..inp.." Feedback",
              Type = "indicator",
              Style = "Led",
              Position = {260, 50 + (inp-1)*40},
              Size = {24, 24},
              CornerRadius = 8,
              Color = Colors.Gray
          }
  
        end
          -- HDCP Outputs
        for outp=1,8 do
          -- Label
          table.insert(graphics, {
              PrettyName = "HDCP Label OUT"..outp,
              Type = "Text",
              Position = {300 +20, 50 + (outp-1)*40},
              Size = {50, 24},
              FontSize = 12,
              Text = "OUT "..outp
          })
  
          -- Botão ON
          layout["HDCP_OUT"..outp.."_ON"] = {
              PrettyName = "HDCP Output "..outp.." ON",
              Type = "Button",
              ButtonType = "Momentary",
              Position = {380 +20, 50 + (outp-1)*40},
              Size = {60, 30},
              Legend = "ON",
              FontSize = 9,
              CornerRadius = 8,
              Color = Colors.Green
          }
          -- Botão ON
          layout["HDCP_OUT"..outp.."_OFF"] = {
              PrettyName = "HDCP Output "..outp.." OFF",
              Type = "Button",
              ButtonType = "Momentary",
              Position = {380 +90, 50 + (outp-1)*40},
              Size = {60, 30},
              Legend = "OFF",
              FontSize = 9,
              CornerRadius = 8,
              Color = Colors.Red
          }
          -- Feedback
          layout["HDCP_OUT"..outp.."_FB"] = {
              PrettyName = "HDCP Input "..outp.." Feedback",
              Type = "indicator",
              Style = "Led",
              Position = {380 + 160, 50 + (outp-1)*40},
              Size = {24, 24},
              CornerRadius = 8,
              Color = Colors.Gray
          }
        end
  ]]
      end
  return layout, graphics
end




--Start event based logic
if Controls then
  
  -- Global Variables
  EmptyIPMessage = "Enter an IP Address"
  Status = Controls.Status
  IPAddress = Controls["DeviceIP"].String
  Port = 23
  
  -- Constants
  EOL = "" --"\n" -- End of line character as defined in device's API
  EOLCharacter = TcpSocket.EOL.CrLfStrict -- EOL Character lookup for TCPSocket ReadLine
  StatusState = {OK=0, COMPROMISED=1, FAULT=2, NOTPRESENT=3, MISSING=4, INITIALIZING=5}
  
  -- Timers
  PollTimer = Timer.New()
  
  -- Sockets
  TCP = TcpSocket.New()
  TCP.ReadTimeout = 5
  TCP.WriteTimeout = 5
  TCP.ReconnectTimeout = 5
  
  -- Variables
  PollTime = 3
  LoggedIn = false
  
  -- Debug level
  DebugTx, DebugRx, DebugFunction = false, false, false
  DebugPrint = Properties["Debug Print"].Value
  if DebugPrint == "Tx/Rx" then
    DebugTx, DebugRx = true, true
  elseif DebugPrint == "Tx" then
    DebugTx = true
  elseif DebugPrint == "Rx" then
    DebugRx = true
  elseif DebugPrint == "Function Calls" then
    DebugFunction = true
  elseif DebugPrint == "All" then
    DebugTx, DebugRx, DebugFunction = true, true, true
  end
    
    
  
    -- *** Functions ***
    -- Helper Functions
    function ReportStatus(state, msg)
      local msg = msg or ""
      Status.Value = StatusState[state]
      Status.String = msg
    end
  
    function Send(cmd)
      if DebugFunction then print("Send() called") end
      if IsConnected() then
        if DebugTx then print("Tx: " .. cmd) end
        TCP:Write(cmd .. "\x0d\x0a")
        print(cmd .. "\x0d\x0a")
      else
        print("Error - Disconnected; unable to send " .. cmd)
      end
    end
  
    function IsConnected()
      return TCP.IsConnected
    end
  
  
    function IsLoggedIn()
      return LoggedIn
    end
  
    function Connect()
      if DebugFunction then print("Connect() called") end
        print("Connecting to " .. IPAddress .. ":" .. Port)  
        TCP:Connect(IPAddress, Port)
    end
  
    function Disconnect()
      if DebugFunction then print("Disconnect() called") end
      TCP:Disconnect()
      Disconnected()
    end
  
    function Connected()
      if DebugFunction then print("Connected() called") end
      --add initialization commands here
  
      PollTimer:Start(PollTime)
      
    end
  
    function Disconnected()
      if DebugFunction then print("Disconnected() called") end
      PollTimer:Stop()
      LoggedIn = false
    end
    
  
    -- TCP socket callbacks
    TCP.Connected = function()
      if DebugFunction then print("TCPSocket Connected Handler called") end
      ReportStatus("OK")
      Connected()
    end
  
    TCP.Reconnect = function()
      if DebugFunction then print("TCPSocket Reconnect Handler called") end
      Disconnected()
    end
  
    TCP.Closed = function()
      if DebugFunction then print("TCPSocket Closed Handler called") end
      ReportStatus("MISSING", "Socket closed")
      Disconnected()
    end
  
    TCP.Error = function()
      if DebugFunction then print("TCPSocket Error Handler called") end
      ReportStatus("MISSING", "Socket error")
      Disconnected()
    end
  
    TCP.Timeout = function()
      if DebugFunction then print("TCPSocket Timeout Handler called") end
      ReportStatus("MISSING", "Timeout")
      Disconnected()
    end
  
    TCP.Data = function()
      if DebugFunction then print("TCPSocket Data Handler called") end
      --print("Data received:")
      ParseResponse()
    end
    
  
    
  
  
  
    function PollDevice()
      if DebugFunction then print("PollDevice() called") end
      --add polling commands here
      Send("GET MP hdmiout1")
      Send("GET MP hdmiout2")
      Send("GET MP hdmiout3")
      Send("GET MP hdmiout4")
      Send("GET MP hdmiout5")
      Send("GET MP hdmiout6")
      Send("GET MP hdmiout7")
      Send("GET MP hdmiout8")
  
      Send("GET AUTOCEC_FN hdmiout1")
      Send("GET AUTOCEC_FN hdmiout2")
      Send("GET AUTOCEC_FN hdmiout3")
      Send("GET AUTOCEC_FN hdmiout4")
      Send("GET AUTOCEC_FN hdmiout5")
      Send("GET AUTOCEC_FN hdmiout6")
      Send("GET AUTOCEC_FN hdmiout7")
      Send("GET AUTOCEC_FN hdmiout8")
      --Send("GET AUDIOSW_M")
    end
  
  
    function PrintOutputRouting()
      print("Current Output Routing:")
      for outp = 1, 8 do
        local input = OutputRouting[outp]
        print("OUT"..outp.." -> "..input)
        Controls.Feedback[outp].String = " -> "..input
      end
    end
  
    function ParseResponse()
      if DebugFunction then print("ParseResponse() called") end
      local rx = TCP:ReadLine(EOLCharacter)
      local buffer = {}
        if DebugRx then print("Rx: " .. rx) end
        table.insert(buffer, rx)
      while next(buffer) ~= nil do
        local line = table.remove(buffer, 1)
        if line then
          if DebugRx then print("Processing line: " .. line) end
  
          
          -- Process the line here
          -- Example: Check for specific responses and update controls
          --[[
          if string.find(line, "AUDIOSW_M") then
            local AudioMode = string.match(line, "AUDIOSW_M%s+(%S+)")
            print (AudioMode)
            if AudioMode == "independent" then
              Sw_Mode_BreakAudio = true
              Sw_Mode_AFV = false
              Sw_Video = true
              Sw_Audio = false
              print ("definido independent")
            elseif AudioMode =="follow" then
              Sw_Mode_BreakAudio = false
              Sw_Mode_AFV = true
              print ("definido follow")
            end
  
            Controls["BreakAudio"].Boolean = Sw_Mode_BreakAudio
            Controls["AudioFollowVideo"].Boolean = Sw_Mode_AFV
            Controls["SwVideo"].IsInvisible = Sw_Mode_AFV
            Controls["SwAudio"].IsInvisible = Sw_Mode_AFV
            Controls["SwVideo"].Boolean = Sw_Video
            Controls["SwAudio"].Boolean = Sw_Audio
          ]]
          if string.find(line, "SW") then
            print ("Switch command response received: " .. line)
            local input, output = string.match(line, "SW HDMIIN(%d+) HDMIOUT(%d+)")
            if input and output then
              output = tonumber(output)
              input = tonumber(input)
              OutputRouting[output] = input
              FeedbackColor(input,output)
            end
            PrintOutputRouting()
  
          elseif string.find(line, "MP") then
            print ("Switch command response received: " .. line)
            local input, output = string.match(line, "MP HDMIIN(%d+) HDMIOUT(%d+)")
            if input and output then
              output = tonumber(output)
              input = tonumber(input)
              OutputRouting[output] = input
              FeedbackColor(input,output)
            end
            PrintOutputRouting()
          --[[
          elseif string.find(line, "AUDIOMP") then -----precisa verificar se o in e OUT é maiusculo ou minusculo
            print ("Switch Audio MAP response received: " .. line)
            local input, output = string.match(line, "AUDIOMP HDMI(%d+) AUDIOOUT(%d+)")
            if input and output then
              output = tonumber(output)
              input = tonumber(input)
              OutputRouting[output] = input
              FeedbackColor(input,output)
            end
            PrintOutputRouting()
  
          elseif string.find(line, "AUDIOSW") then -----precisa verificar se o in e OUT é maiusculo ou minusculo
            print ("Switch Audio command response received: " .. line)
            local input, output = string.match(line, "AUDIOSW in(%d+) lineout(%d+)")
            if input and output then
              output = tonumber(output)
              input = tonumber(input)
              OutputRouting[output] = input
              FeedbackColor(input,output)
            end
            PrintOutputRouting()
  
            -----------------add new parsing here.
          ]]
          elseif string.find(line, "CEC_PWR") then
          -- Exemplo: "CEC_PWR out1 on"
            local outp, state = string.match(line, "CEC_PWR HDMIOUT(%d+) (%a+)")
            if outp and state then
              outp = tonumber(outp)
              local isOn = (state == "ON")
  
              -- Atualiza botão toggle
              Controls["CEC_PWR_OUT"..outp].Boolean = isOn
  
              -- Atualiza botão Power ON
              Controls["CEC_PWR_ON_OUT"..outp].Boolean = isOn
  
              -- Atualiza botão Power OFF
              Controls["CEC_PWR_OFF_OUT"..outp].Boolean = not isOn
  
              if DebugRx then
                  print("CEC Power status OUT"..outp.." = "..state)
              end
            end
          elseif string.find(line, "AUTOCEC_FN") then
            -- Exemplo: "AUTOCEC_FN out1 on"
            local outp, state = string.match(line, "AUTOCEC_FN hdmiout(%d+) (%a+)")
            if outp and state then
                outp = tonumber(outp)
                local isOn = (state == "ON")
  
                -- Atualiza botão toggle
                Controls["AUTOCEC_OUT"..outp].Boolean = isOn
  
                if DebugRx then
                    print("AUTOCEC status OUT"..outp.." = "..state)
                end
            end
            --[[
          elseif string.find(line, "HDCP_S in") then
            local num, state = string.match(line, "HDCP_S in(%d+) (%a+)")
            if num and state then
                num = tonumber(num)
                local isOn = (state == "on")
                Controls["HDCP_IN"..num.."_FB"].Boolean = isOn
            end
  
          elseif string.find(line, "HDCP_S out") then
            local num, state = string.match(line, "HDCP_S out(%d+) (%a+)")
            if num and state then
                num = tonumber(num)
                local isOn = (state == "on")
                Controls["HDCP_OUT"..num.."_FB"].Boolean = isOn
            end
  ]]
  
          -- Add more parsing as needed based on device's API responses
          end
        end
      end
    end
    
    
  
    -- *** Event Handlers ***
    Controls["DeviceIP"].EventHandler = function()
      if DebugFunction then print("IPAddress handler called") end
      IPAddress = Controls["DeviceIP"].String
      if IPAddress == "" or IPAddress == "Enter an IP Address" then
        IPAddress = EmptyIPMessage
        Disconnect()
      else
        Connect()
      end
    end
  
    Controls["DevicePort"].EventHandler = function()
      if DebugFunction then print("Port handler called") end
      Port = tonumber(Controls["DevicePort"].String)
      print("Port set to " .. Port)
      Disconnect()
      Connect()
    end
  
    Controls["DevicePort"].String = tostring(Port)
    Controls["DeviceIP"].String = IPAddress
  
    PollTimer.EventHandler = PollDevice
  
    -- Run at start
    Connect()
  --[[Controls.SendButton.EventHandler = function()
    print("Hello, World!")
  end]]
  
  
  for outp = 1, 8 do
    for inp = 1, 8 do
      Controls["Route_"..inp.."_"..outp].EventHandler = function ()
        if DebugFunction then print("Route EventHandler called") end
          Send("SET SW hdmiin"..inp.." hdmiout" .. outp)
      end
    end
  end
  
  --[[
  Controls["AudioFollowVideo"].EventHandler = function()
    if DebugFunction then print("Audio Follow Video called") end
    Send ("SET AUDIOSW_M follow")
  end
  
  Controls["BreakAudio"].EventHandler = function()
    if DebugFunction then print("Break Audio called") end
    Send ("SET AUDIOSW_M independent")
  end
  
  Controls["SwVideo"].EventHandler = function()
    if DebugFunction then print("Sw Video Called") end
      Send("GET MP all")
      Sw_Video = true
      Sw_Audio = false
      Controls["SwVideo"].Boolean = Sw_Video
      Controls["SwAudio"].Boolean = Sw_Audio
  end
  
  Controls["SwAudio"].EventHandler = function()
    if DebugFunction then print("Sw Audio Called") end
      Send("GET AUDIOMP all")
      Sw_Video = false
      Sw_Audio = true
      Controls["SwVideo"].Boolean = Sw_Video
      Controls["SwAudio"].Boolean = Sw_Audio
  end
  ]]
  
  for i = 1, 3 do
    Controls["SavePreset"..i].EventHandler = function()
      if DebugFunction then print("Saving Preset "..i) end
      Send("SAVE PRESET " .. i)
    end
  
    Controls["RestorePreset"..i].EventHandler = function()
      if DebugFunction then print("Restoring Preset "..i) end
      Send("RESTORE PRESET " .. i)
    end
  end
  
  
  for outp=1, 8 do
      Controls["CEC_PWR_OUT"..outp].EventHandler = function(ctrl)
          if ctrl.Boolean then
              if DebugFunction then print("SET CEC_PWR hdmiout"..outp.." on") end
              Send("SET CEC_PWR hdmiout"..outp.." on")
          else
              if DebugFunction then print("SET CEC_PWR hdmiout"..outp.." off") end
              Send("SET CEC_PWR hdmiout"..outp.." off")
          end
      end
  
      -- Power ON
      Controls["CEC_PWR_ON_OUT"..outp].EventHandler = function()
          if DebugFunction then print("SET CEC_PWR hdmiout"..outp.." on") end
          Send("SET CEC_PWR hdmiout"..outp.." on")
          Controls["CEC_PWR_OUT"..outp].Boolean = true
      end
  
      -- Power OFF
      Controls["CEC_PWR_OFF_OUT"..outp].EventHandler = function()
          if DebugFunction then print("SET CEC_PWR hdmiout"..outp.." off") end
          Send("SET CEC_PWR hdmiout"..outp.." off")
          Controls["CEC_PWR_OUT"..outp].Boolean = false
      end
  
      -- AutoCEC Power Toggle
      Controls["AUTOCEC_OUT"..outp].EventHandler = function(ctrl)
          if ctrl.Boolean then
              if DebugFunction then print("SET AUTOCEC_FN hdmiout"..outp.." on") end
              Send("SET AUTOCEC_FN hdmiout"..outp.." on")
          else
              if DebugFunction then print("SET AUTOCEC_FN hdmiout"..outp.." off") end
              Send("SET AUTOCEC_FN hdmiout"..outp.." off")
          end
      end
  end
  --[[
  -- HDCP Controls para Entradas
  for i = 1, 8 do
      Controls["HDCP_IN"..i.."_ON"].EventHandler = function()
          Send("SET HDCP_S in"..i.." on")
          Controls["HDCP_IN"..i.."_FB"].Boolean = true
      end
  
      Controls["HDCP_IN"..i.."_OFF"].EventHandler = function()
          Send("SET HDCP_S in"..i.." off")
          Controls["HDCP_IN"..i.."_FB"].Boolean = false
      end
  end
  
  -- HDCP Controls para Saídas
  for i = 1, 8 do
      Controls["HDCP_OUT"..i.."_ON"].EventHandler = function()
          Send("SET HDCP_S out"..i.." on")
          Controls["HDCP_OUT"..i.."_FB"].Boolean = true
      end
  
      Controls["HDCP_OUT"..i.."_OFF"].EventHandler = function()
          Send("SET HDCP_S out"..i.." off")
          Controls["HDCP_OUT"..i.."_FB"].Boolean = false
      end
  end
  ]]
end
